{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport apiService, { api } from '../../utils/api';\nimport { toast } from 'react-toastify';\nconst UserManagement = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [roleFilter, setRoleFilter] = useState('all');\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n\n  // Fetch all users\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        setIsLoading(true);\n        // Change this line to use apiService.admin.getUsers() instead of api.admin.getUsers()\n        const response = await apiService.admin.getUsers();\n        setUsers(response.data);\n      } catch (error) {\n        console.error('Error fetching users:', error);\n        toast.error('Der opstod en fejl ved hentning af brugere');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchUsers();\n  }, []);\n\n  // Rest of your component code...\n\n  // Update user\n  const handleUpdateUser = async e => {\n    e.preventDefault();\n    try {\n      // Format user data (exclude password if empty)\n      const userData = {\n        username: selectedUser.username,\n        email: selectedUser.email,\n        role: selectedUser.role,\n        ...(selectedUser.password ? {\n          password: selectedUser.password\n        } : {})\n      };\n\n      // Update this line to use apiService.admin.updateUser\n      await apiService.admin.updateUser(selectedUser._id, userData);\n\n      // Update local users state\n      setUsers(users.map(user => user._id === selectedUser._id ? {\n        ...user,\n        ...userData\n      } : user));\n      toast.success('Bruger opdateret!');\n      closeEditModal();\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error updating user:', error);\n      toast.error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Der opstod en fejl ved opdatering af brugeren');\n    }\n  };\n\n  // Rest of your component...\n};\n_s(UserManagement, \"+4XOGprd+1EPvUiAsskxFd2s/vQ=\");\n_c = UserManagement;\nexport default UserManagement;\nvar _c;\n$RefreshReg$(_c, \"UserManagement\");","map":{"version":3,"names":["React","useState","useEffect","Link","apiService","api","toast","UserManagement","_s","users","setUsers","isLoading","setIsLoading","searchQuery","setSearchQuery","roleFilter","setRoleFilter","selectedUser","setSelectedUser","showModal","setShowModal","fetchUsers","response","admin","getUsers","data","error","console","handleUpdateUser","e","preventDefault","userData","username","email","role","password","updateUser","_id","map","user","success","closeEditModal","_error$response","_error$response$data","message","_c","$RefreshReg$"],"sources":["Z:/Documents/IBA/webdev/leadership-training-app/frontend/src/pages/admin/UserManagement.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport apiService, { api } from '../../utils/api';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst UserManagement = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [roleFilter, setRoleFilter] = useState('all');\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  \r\n  // Fetch all users\r\n  useEffect(() => {\r\n    const fetchUsers = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        // Change this line to use apiService.admin.getUsers() instead of api.admin.getUsers()\r\n        const response = await apiService.admin.getUsers();\r\n        setUsers(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching users:', error);\r\n        toast.error('Der opstod en fejl ved hentning af brugere');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchUsers();\r\n  }, []);\r\n  \r\n  // Rest of your component code...\r\n  \r\n  // Update user\r\n  const handleUpdateUser = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    try {\r\n      // Format user data (exclude password if empty)\r\n      const userData = {\r\n        username: selectedUser.username,\r\n        email: selectedUser.email,\r\n        role: selectedUser.role,\r\n        ...(selectedUser.password ? { password: selectedUser.password } : {})\r\n      };\r\n      \r\n      // Update this line to use apiService.admin.updateUser\r\n      await apiService.admin.updateUser(selectedUser._id, userData);\r\n      \r\n      // Update local users state\r\n      setUsers(users.map(user => \r\n        user._id === selectedUser._id ? { ...user, ...userData } : user\r\n      ));\r\n      \r\n      toast.success('Bruger opdateret!');\r\n      closeEditModal();\r\n    } catch (error) {\r\n      console.error('Error updating user:', error);\r\n      toast.error(error.response?.data?.message || 'Der opstod en fejl ved opdatering af brugeren');\r\n    }\r\n  };\r\n  \r\n  // Rest of your component...\r\n};\r\n\r\nexport default UserManagement;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}