{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport apiService, { api } from '../../utils/api'; // Update this import\nimport { toast } from 'react-toastify';\nimport { useAuth } from '../../contexts/AuthContext';\nconst AdminDashboard = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const [stats, setStats] = useState(null);\n  const [games, setGames] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Fetch admin data\n  useEffect(() => {\n    const fetchAdminData = async () => {\n      try {\n        setIsLoading(true);\n\n        // Get system statistics - update to use the direct api instance\n        const statsResponse = await api.get('/api/admin/stats');\n        setStats(statsResponse.data);\n\n        // Get all games - use apiService if the method exists\n        const gamesResponse = await apiService.games.getAll();\n        setGames(gamesResponse.data);\n\n        // Get all users - update to use the direct api instance if needed\n        const usersResponse = await api.get('/api/admin/users');\n        setUsers(usersResponse.data);\n      } catch (error) {\n        console.error('Error fetching admin data:', error);\n        toast.error('Der opstod en fejl ved hentning af data');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchAdminData();\n  }, []);\n\n  // Rest of your component code...\n};\n_s(AdminDashboard, \"ifKab7Vn/N3+fXNJOJ5kcvJtlLc=\", false, function () {\n  return [useAuth];\n});\n_c = AdminDashboard;\nexport default AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["React","useState","useEffect","Link","apiService","api","toast","useAuth","AdminDashboard","_s","user","stats","setStats","games","setGames","users","setUsers","isLoading","setIsLoading","fetchAdminData","statsResponse","get","data","gamesResponse","getAll","usersResponse","error","console","_c","$RefreshReg$"],"sources":["Z:/Documents/IBA/webdev/leadership-training-app/frontend/src/pages/admin/AdminDashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport apiService, { api } from '../../utils/api';  // Update this import\r\nimport { toast } from 'react-toastify';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\n\r\nconst AdminDashboard = () => {\r\n  const { user } = useAuth();\r\n  \r\n  const [stats, setStats] = useState(null);\r\n  const [games, setGames] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  \r\n  // Fetch admin data\r\n  useEffect(() => {\r\n    const fetchAdminData = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        \r\n        // Get system statistics - update to use the direct api instance\r\n        const statsResponse = await api.get('/api/admin/stats');\r\n        setStats(statsResponse.data);\r\n        \r\n        // Get all games - use apiService if the method exists\r\n        const gamesResponse = await apiService.games.getAll();\r\n        setGames(gamesResponse.data);\r\n        \r\n        // Get all users - update to use the direct api instance if needed\r\n        const usersResponse = await api.get('/api/admin/users');\r\n        setUsers(usersResponse.data);\r\n      } catch (error) {\r\n        console.error('Error fetching admin data:', error);\r\n        toast.error('Der opstod en fejl ved hentning af data');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchAdminData();\r\n  }, []);\r\n  \r\n  // Rest of your component code...\r\n};\r\n\r\nexport default AdminDashboard;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,UAAU,IAAIC,GAAG,QAAQ,iBAAiB,CAAC,CAAE;AACpD,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,OAAO,QAAQ,4BAA4B;AAEpD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM;IAAEC;EAAK,CAAC,GAAGH,OAAO,CAAC,CAAC;EAE1B,MAAM,CAACI,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMiB,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACFD,YAAY,CAAC,IAAI,CAAC;;QAElB;QACA,MAAME,aAAa,GAAG,MAAMf,GAAG,CAACgB,GAAG,CAAC,kBAAkB,CAAC;QACvDT,QAAQ,CAACQ,aAAa,CAACE,IAAI,CAAC;;QAE5B;QACA,MAAMC,aAAa,GAAG,MAAMnB,UAAU,CAACS,KAAK,CAACW,MAAM,CAAC,CAAC;QACrDV,QAAQ,CAACS,aAAa,CAACD,IAAI,CAAC;;QAE5B;QACA,MAAMG,aAAa,GAAG,MAAMpB,GAAG,CAACgB,GAAG,CAAC,kBAAkB,CAAC;QACvDL,QAAQ,CAACS,aAAa,CAACH,IAAI,CAAC;MAC9B,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDpB,KAAK,CAACoB,KAAK,CAAC,yCAAyC,CAAC;MACxD,CAAC,SAAS;QACRR,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDC,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF,CAAC;AAACV,EAAA,CArCID,cAAc;EAAA,QACDD,OAAO;AAAA;AAAAqB,EAAA,GADpBpB,cAAc;AAuCpB,eAAeA,cAAc;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}