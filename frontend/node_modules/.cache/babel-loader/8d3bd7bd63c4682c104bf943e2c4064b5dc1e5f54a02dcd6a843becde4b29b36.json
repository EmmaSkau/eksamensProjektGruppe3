{"ast":null,"code":"/**\r\n * Authentication Service\r\n * \r\n * This service centralizes all authentication-related functionality\r\n * including token management, user information, and role-based access control.\r\n * \r\n * File path: frontend/src/utils/authService.js\r\n */\n\nimport { api } from './api';\nconst TOKEN_KEY = 'token';\nconst USER_KEY = 'user_data';\n\n/**\r\n * Auth Service provides methods for handling authentication\r\n */\nconst authService = {\n  /**\r\n   * Get the authentication token from localStorage\r\n   * @returns {string|null} The authentication token or null if not found\r\n   */\n  getToken: () => {\n    return localStorage.getItem(TOKEN_KEY);\n  },\n  /**\r\n   * Set the authentication token in localStorage and in API headers\r\n   * @param {string} token - The authentication token\r\n   */\n  setToken: token => {\n    localStorage.setItem(TOKEN_KEY, token);\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  },\n  /**\r\n   * Remove the authentication token from localStorage and API headers\r\n   */\n  removeToken: () => {\n    localStorage.removeItem(TOKEN_KEY);\n    delete api.defaults.headers.common['Authorization'];\n  },\n  /**\r\n   * Check if user is authenticated\r\n   * @returns {boolean} True if user has a token, false otherwise\r\n   */\n  isAuthenticated: () => {\n    return !!localStorage.getItem(TOKEN_KEY);\n  },\n  /**\r\n   * Get the user information from localStorage\r\n   * @returns {Object|null} The user object or null if not found\r\n   */\n  getUserInfo: () => {\n    const userJSON = localStorage.getItem(USER_KEY);\n    if (userJSON) {\n      try {\n        return JSON.parse(userJSON);\n      } catch (e) {\n        console.error('Error parsing user info from localStorage', e);\n        return null;\n      }\n    }\n    return null;\n  },\n  /**\r\n   * Set user information in localStorage\r\n   * @param {Object} user - The user object to store\r\n   */\n  setUserInfo: user => {\n    localStorage.setItem(USER_KEY, JSON.stringify(user));\n  },\n  /**\r\n   * Remove user information from localStorage\r\n   */\n  removeUserInfo: () => {\n    localStorage.removeItem(USER_KEY);\n  },\n  /**\r\n   * Check if user has a specific role\r\n   * @param {string|string[]} requiredRoles - The role(s) to check\r\n   * @returns {boolean} True if user has the required role, false otherwise\r\n   */\n  hasRole: requiredRoles => {\n    const user = authService.getUserInfo();\n\n    // If no user or no role, return false\n    if (!user || !user.role) {\n      return false;\n    }\n\n    // If requiredRoles is a string, convert to array\n    const roles = Array.isArray(requiredRoles) ? requiredRoles : [requiredRoles];\n\n    // Check if user's role is in the required roles\n    return roles.includes(user.role);\n  },\n  /**\r\n   * Get the auth header for API requests\r\n   * @returns {Object} The auth header object\r\n   */\n  getAuthHeader: () => {\n    const token = authService.getToken();\n    return token ? {\n      'Authorization': `Bearer ${token}`\n    } : {};\n  },\n  /**\r\n   * Login a user\r\n   * @param {Object} credentials - The login credentials (email, password)\r\n   * @returns {Promise} A promise that resolves to the user data\r\n   */\n  login: async credentials => {\n    try {\n      const response = await api.post('/api/auth/login', credentials);\n      const {\n        token,\n        user\n      } = response.data;\n      authService.setToken(token);\n      authService.setUserInfo(user);\n      return user;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  /**\r\n   * Logout the current user\r\n   */\n  logout: () => {\n    authService.removeToken();\n    authService.removeUserInfo();\n  },\n  /**\r\n   * Register a new user\r\n   * @param {Object} userData - The user data for registration\r\n   * @returns {Promise} A promise that resolves to the registration response\r\n   */\n  register: async userData => {\n    try {\n      const response = await api.post('/api/auth/register', userData);\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  },\n  /**\r\n   * Get the current user's profile\r\n   * @returns {Promise} A promise that resolves to the user profile\r\n   */\n  getProfile: async () => {\n    try {\n      const response = await api.get('/api/auth/profile');\n\n      // Update stored user info with latest data\n      authService.setUserInfo(response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Get profile error:', error);\n\n      // If unauthorized, clear auth data\n      if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n        authService.removeToken();\n        authService.removeUserInfo();\n      }\n      throw error;\n    }\n  },\n  /**\r\n   * Check if the current token is valid\r\n   * @returns {Promise<boolean>} A promise that resolves to true if token is valid, false otherwise\r\n   */\n  validateToken: async () => {\n    if (!authService.getToken()) {\n      return false;\n    }\n    try {\n      const response = await api.get('/api/auth/profile');\n      authService.setUserInfo(response.data);\n      return true;\n    } catch (error) {\n      console.error('Token validation error:', error);\n      authService.removeToken();\n      authService.removeUserInfo();\n      return false;\n    }\n  }\n};\nexport default authService;","map":{"version":3,"names":["api","TOKEN_KEY","USER_KEY","authService","getToken","localStorage","getItem","setToken","token","setItem","defaults","headers","common","removeToken","removeItem","isAuthenticated","getUserInfo","userJSON","JSON","parse","e","console","error","setUserInfo","user","stringify","removeUserInfo","hasRole","requiredRoles","role","roles","Array","isArray","includes","getAuthHeader","login","credentials","response","post","data","logout","register","userData","getProfile","get","status","validateToken"],"sources":["Z:/Documents/IBA/webdev/leadership-training-app/frontend/src/utils/authService.js"],"sourcesContent":["/**\r\n * Authentication Service\r\n * \r\n * This service centralizes all authentication-related functionality\r\n * including token management, user information, and role-based access control.\r\n * \r\n * File path: frontend/src/utils/authService.js\r\n */\r\n\r\nimport { api } from './api';\r\n\r\nconst TOKEN_KEY = 'token';\r\nconst USER_KEY = 'user_data';\r\n\r\n/**\r\n * Auth Service provides methods for handling authentication\r\n */\r\nconst authService = {\r\n  /**\r\n   * Get the authentication token from localStorage\r\n   * @returns {string|null} The authentication token or null if not found\r\n   */\r\n  getToken: () => {\r\n    return localStorage.getItem(TOKEN_KEY);\r\n  },\r\n  \r\n  /**\r\n   * Set the authentication token in localStorage and in API headers\r\n   * @param {string} token - The authentication token\r\n   */\r\n  setToken: (token) => {\r\n    localStorage.setItem(TOKEN_KEY, token);\r\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  },\r\n  \r\n  /**\r\n   * Remove the authentication token from localStorage and API headers\r\n   */\r\n  removeToken: () => {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    delete api.defaults.headers.common['Authorization'];\r\n  },\r\n  \r\n  /**\r\n   * Check if user is authenticated\r\n   * @returns {boolean} True if user has a token, false otherwise\r\n   */\r\n  isAuthenticated: () => {\r\n    return !!localStorage.getItem(TOKEN_KEY);\r\n  },\r\n  \r\n  /**\r\n   * Get the user information from localStorage\r\n   * @returns {Object|null} The user object or null if not found\r\n   */\r\n  getUserInfo: () => {\r\n    const userJSON = localStorage.getItem(USER_KEY);\r\n    if (userJSON) {\r\n      try {\r\n        return JSON.parse(userJSON);\r\n      } catch (e) {\r\n        console.error('Error parsing user info from localStorage', e);\r\n        return null;\r\n      }\r\n    }\r\n    return null;\r\n  },\r\n  \r\n  /**\r\n   * Set user information in localStorage\r\n   * @param {Object} user - The user object to store\r\n   */\r\n  setUserInfo: (user) => {\r\n    localStorage.setItem(USER_KEY, JSON.stringify(user));\r\n  },\r\n  \r\n  /**\r\n   * Remove user information from localStorage\r\n   */\r\n  removeUserInfo: () => {\r\n    localStorage.removeItem(USER_KEY);\r\n  },\r\n  \r\n  /**\r\n   * Check if user has a specific role\r\n   * @param {string|string[]} requiredRoles - The role(s) to check\r\n   * @returns {boolean} True if user has the required role, false otherwise\r\n   */\r\n  hasRole: (requiredRoles) => {\r\n    const user = authService.getUserInfo();\r\n    \r\n    // If no user or no role, return false\r\n    if (!user || !user.role) {\r\n      return false;\r\n    }\r\n    \r\n    // If requiredRoles is a string, convert to array\r\n    const roles = Array.isArray(requiredRoles) ? requiredRoles : [requiredRoles];\r\n    \r\n    // Check if user's role is in the required roles\r\n    return roles.includes(user.role);\r\n  },\r\n  \r\n  /**\r\n   * Get the auth header for API requests\r\n   * @returns {Object} The auth header object\r\n   */\r\n  getAuthHeader: () => {\r\n    const token = authService.getToken();\r\n    return token ? { 'Authorization': `Bearer ${token}` } : {};\r\n  },\r\n  \r\n  /**\r\n   * Login a user\r\n   * @param {Object} credentials - The login credentials (email, password)\r\n   * @returns {Promise} A promise that resolves to the user data\r\n   */\r\n  login: async (credentials) => {\r\n    try {\r\n      const response = await api.post('/api/auth/login', credentials);\r\n      const { token, user } = response.data;\r\n      \r\n      authService.setToken(token);\r\n      authService.setUserInfo(user);\r\n      \r\n      return user;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Logout the current user\r\n   */\r\n  logout: () => {\r\n    authService.removeToken();\r\n    authService.removeUserInfo();\r\n  },\r\n  \r\n  /**\r\n   * Register a new user\r\n   * @param {Object} userData - The user data for registration\r\n   * @returns {Promise} A promise that resolves to the registration response\r\n   */\r\n  register: async (userData) => {\r\n    try {\r\n      const response = await api.post('/api/auth/register', userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Get the current user's profile\r\n   * @returns {Promise} A promise that resolves to the user profile\r\n   */\r\n  getProfile: async () => {\r\n    try {\r\n      const response = await api.get('/api/auth/profile');\r\n      \r\n      // Update stored user info with latest data\r\n      authService.setUserInfo(response.data);\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get profile error:', error);\r\n      \r\n      // If unauthorized, clear auth data\r\n      if (error.response && (error.response.status === 401 || error.response.status === 403)) {\r\n        authService.removeToken();\r\n        authService.removeUserInfo();\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Check if the current token is valid\r\n   * @returns {Promise<boolean>} A promise that resolves to true if token is valid, false otherwise\r\n   */\r\n  validateToken: async () => {\r\n    if (!authService.getToken()) {\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      const response = await api.get('/api/auth/profile');\r\n      authService.setUserInfo(response.data);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Token validation error:', error);\r\n      authService.removeToken();\r\n      authService.removeUserInfo();\r\n      return false;\r\n    }\r\n  }\r\n};\r\n\r\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}